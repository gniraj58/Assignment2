1.
public static int toInt(String s) {
    return Integer.parseInt(s);
}
 
public static Integer toInteger(String s) {
    return Integer.valueOf(s);
}


2.
class Main{  
private int data=40;  
private void msg()
{
System.out.println("Hello java");}  
}  
  
public class Main1{  
 public static void main(String args[]){  
   A obj=new A();  
   System.out.println(obj.data);    //Compile Time Error  
   obj.msg();    //Compile Time Error  
   }  
}  

3.
public class Calculator{
	int result;
	//  Method for addition
	
                public int add(int num1, int num2){
		result = num1+num2;
		return result;
}
}


import java.util.*;
 
class Main {
    public static void main(String args[])
    {
    
        Map<String, Integer> hm
            = new HashMap<String, Integer>();
 
        // Inserting pairs in above Map
        // using put() method
        hm.put("a", new Integer(100));
        hm.put("b", new Integer(200));
        hm.put("c", new Integer(300));
        hm.put("d", new Integer(400));
             hm.entrySet()) {
            System.out.print(me.getKey() + ":");
            System.out.println(me.getValue());
        }
    }
}

4.
public class Main
{
 int square(int num){
   return num * num; // return a square value.
 }
public static void main(String[] args) 
{
// Create an obejct of class Main
  Test t = new Test(); 
   int squareOfNumber = t.square(20);     
   System.out.println("Square of 20: " +squareOfNumber);
  }
}

6.

import java.util.*;

public class collectionAssisted {

	public static void main(String[] args) {
		//creating arraylist
		System.out.println("ArrayList");
		ArrayList<String> city=new ArrayList<String>();   
	      city.add("Bangalore");//
	      city.add("Delhi");    	   
	      System.out.println(city);  
		
		//creating vector
	      System.out.println("\n");
	      System.out.println("Vector");
	      Vector<Integer> vec = new Vector();
	      vec.addElement(15); 
	      vec.addElement(30); 
	      System.out.println(vec);
		
		//creating linkedlist
	      System.out.println("\n");
	      System.out.println("LinkedList");
	      LinkedList<String> names=new LinkedList<String>();  
	      names.add("Alex");  
	      names.add("John");  	      
	      Iterator<String> itr=names.iterator();  
	      while(itr.hasNext()){  
	       System.out.println(itr.next());  
	       
	       //creating hashset
	       System.out.println("\n");
	       System.out.println("HashSet");
	       HashSet<Integer> set=new HashSet<Integer>();  
	       set.add(101);  
	       set.add(103);  
	       set.add(102);
	       set.add(104);
	       System.out.println(set);
	       
	       //creating linkedhashset
	       System.out.println("\n");
	       System.out.println("LinkedHashSet");
	       LinkedHashSet<Integer> set2=new LinkedHashSet<Integer>();  
	       set2.add(11);  
	       set2.add(13);  
	       set2.add(12);
	       set2.add(14);	       
	       System.out.println(set2);
	      	} 
	      }  
	}


5.
class EmpInfo{
	int id;
	String name;

void display() {
	System.out.println(id+" "+name);
	}
}

public class constructorDemo {

public static void main(String[ ] args) {

	EmpInfo emp1=new EmpInfo();
	EmpInfo emp2=new EmpInfo();

	emp1.display();
	emp2.display();
	}
}

      //parameterized constructor
      class Std{
	int id;
	String name;

	Std(int i,String n)
	{
	id=i;
	name=n;
	}

	void display() {
	System.out.println(id+" "+name);
	}
}

public class paramConstrDemo {
public static void main(String[] args) {

	Std std1=new Std(2,"Alex");
	Std std2=new Std(10,"Annie");
	std1.display();
	std2.display();
}
}

7.
public class innerClassAssisted1 {

	 private String msg="Welcome to Java"; 
	 
	 class Inner{  
	  void hello(){System.out.println(msg+", Let us start learning Inner Classes");}  
	 }  


	public static void main(String[] args) {

		innerClassAssisted1 obj=new innerClassAssisted1();
		innerClassAssisted1.Inner in=obj.new Inner();  
		in.hello();  
	}
}


public class innerClassAssisted{

private String msg="Inner Classes";

 void display(){  
	 class Inner{  
		 void msg(){
			 System.out.println(msg);
		 }  
  }  
  
  Inner l=new Inner();  
  l.msg();  
 }  
public static void main(String[] args) {
	innerClassAssisted2  ob=new innerClassAssisted2 ();  
	ob.display();  
	}
}

abstract class AnonymousInnerClass {
	   public abstract void display();
	}


	public class innerClassAssisted3 {

	public static void main(String[] args) {
	AnonymousInnerClass i = new AnonymousInnerClass() {

	         public void display() {
	            System.out.println("Anonymous Inner Class");
	         }
	      };
	      i.display();
	   }
	}


8.

public class stringDemo {

	public static void main(String[] args) {
		//methods of strings
		System.out.println("Methods of Strings");
		
		String sl=new String("Hello World");
		System.out.println(sl.length());

		//substring
		String sub=new String("Welcome");
		System.out.println(sub.substring(2));

		//String Comparison
		String s1="Hello";
		String s2="Heldo";
		System.out.println(s1.compareTo(s2));

		//IsEmpty
		String s4="";
		System.out.println(s4.isEmpty());

		//toLowerCase
		String s5="Hello";
		System.out.println(s1.toLowerCase());
		
		//replace
		String s6="Heldo";
		String replace=s2.replace('d', 'l');
		System.out.println(replace);

		//equals
		String x="Welcome to Java";
		String y="Welcome to JaVa";
		System.out.println(x.equals(y));
 
		System.out.println("\n");
		System.out.println("Creating StringBuffer");
		 
                                       StringBuffer s=new StringBuffer("Welcome to Java!");
		s.append("Enjoy your learning");
		System.out.println(s);

		//insert method
		s.insert(0, 'w');
		System.out.println(s);

		StringBuffer sb=new StringBuffer("Hello");
		sb.replace(0, 2, "hEl");
		System.out.println(sb);

		sb.delete(0, 1);
		System.out.println(sb);
		
		System.out.println("\n");
		System.out.println("Creating StringBuilder");
		StringBuilder sb1=new StringBuilder("Happy");
		sb1.append("Learning");
		System.out.println(sb1);

		System.out.println(sb1.delete(0, 1));

		System.out.println(sb1.insert(1, "Welcome"));

		System.out.println(sb1.reverse());	
		System.out.println("\n");
		System.out.println("Conversion of Strings to StringBuffer and StringBuilder");
		
		String str = "Hello"; 
        
        // conversion from String object to StringBuffer 
        StringBuffer sbr = new StringBuffer(str); 
        sbr.reverse(); 
        System.out.println("String to StringBuffer");
        System.out.println(sbr);    
        
      // conversion from String object to StringBuilder 
      
        StringBuilder sbl = new StringBuilder(str); 
        sbl.append("world"); 
        System.out.println("String to StringBuilder");
        System.out.println(sbl);              		
	}
}



11.
public class Main
{
    public static void main(String[] args) {
         
        String[ ] myarray;       //declaration of string array without size
        String[ ] strArray = new String[5];  //declaration with size
 
        //System.out.println(myarray[0]);   //variable myarray might not have been initialized
        //display elements of second array
        System.out.print(strArray[0] + " " +strArray[1]+ " " + strArray[2]+ " " +
        strArray[3]+ " " +strArray[4]);
    }
}



9.

public class TwodimensionalArray
{
   public static void main(String[] args) 
   {
  
      int[ ][ ] arrnumbers = {{2, 4},{6, 8},{10, 12}};   
      System.out.println("Two dimensional array: ");    
      for(int a = 0; a < 3; a++) 
      {
         for(int b = 0; b < 2; b++) 
         {
            System.out.println(arrnumbers[a][b]);
         }
      }
   }
}


16...

// Java program that demonstrates the use of throw
class Main
{
    public static void main(String[] args)
    {
        System.out.println(1/0);
    }
}

// Java program that demonstrates the use of throw
class ThrowExcep
{
	static void fun()
	{
		try
		{
			throw new NullPointerException("demo");
		}
		catch(NullPointerException e)
		{
			System.out.println("Caught inside fun().");
		}
	}

	public static void main(String args[])
	{
		try
		{
			fun();
		}
		catch(NullPointerException e)
		{
			System.out.println("abcdef");
		}
	                   } 
                                      }



26...
public class SinglyLinkedList {  
      
    //Represent a node of the singly linked list  
    class Node{  
        int data;  
        Node next;  
          
        public Node(int data) {  
            this.data = data;  
            this.next = null;  
        }  
    }  
   
    //Represent the head and tail of the singly linked list  
    public Node head = null;  
    public Node tail = null;  
       
    public void addNode(int data) {  
        //Create a new node  
        Node newNode = new Node(data);  
            
        if(head == null) {  
            //If list is empty, both head and tail will point to new node  
            head = newNode;  
            tail = newNode;  
        }  
        else {  
 
            tail.next = newNode;  
            //newNode will become new tail of the list  
            tail = newNode;  
        }  
    }  
      
    //display() will display all the nodes present in the list  
    public void display()  
            {  

        Node current = head;  
          
        if(head == null) {  
            System.out.println("List is empty");  
            return;  
        }  
        System.out.println("Nodes of singly linked list: ");  
        while(current != null) {  
            //Prints each node by incrementing pointer  
            System.out.print(current.data + " ");  
            current = current.next;  
        }  
        System.out.println();  
    }  
      
    public static void main(String[ ] args) {  
          
        SinglyLinkedList sList = new SinglyLinkedList();  
          
        //Add nodes to the list  
        sList.addNode(1);  
        sList.addNode(2);  
        sList.addNode(3);  
        sList.addNode(4);  
          
        sList.display();  
    }  
}  


21...

import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

public class AppendToFileExample {
   public static void main( String[] args ) {

      try {
         String data = " Tutorials Point is a best website in the world";
         File f1 = new File;
         if(!f1.exists()) {
            f1.createNewFile();
         }

         FileWriter fileWritter = new FileWriter(f1.getName(),true);
         BufferedWriter bw = new BufferedWriter(fileWritter);
         bw.write(data);
         bw.close();
         System.out.println("Done");
      } catch(IOException e){
         e.printStackTrace();
      }
   }
}


29...

import java.util.Stack;  
public class StackEmptyMethod
{  
public static void main(String[ ] args)   
{  
//creating an instance of Stack class  
Stack<Integer> stk= new Stack<>();  
  
boolean result = stk.empty();  
System.out.println("Is the stack empty? " + result);  

// pushing elements into stack  

stk.push(78);  
stk.push(113);  
stk.push(90);  
stk.push(120);  
 
System.out.println("Elements in Stack: " + stk);  
result = stk.empty();  
System.out.println("Is the stack empty? " + result);  
}  
} 

30...

class Queue {
private static int front, rear, capacity;
private static int queue[ ];
Queue(int size) {
front = rear = 0;
capacity = size;
queue = new int[capacity];
}
}

38...

class MergeSort 
{
    void merge(int arr[ ], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;
 
        int L[ ] = new int[n1];
        int R[ ] = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j]

        int i = 0, j = 0;

        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
 
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
  
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
  
    // merge()
    void sort(int arr[ ], int l, int r)
    {
        if (l < r) {
            // Find the middle point
            int m =l+ (r-l)/2

            sort(arr, l, m);
            sort(arr, m + 1, r);
  
            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
    static void printArray(int arr[ ])
    {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
  
    public static void main(String args[ ])
    {
        int arr[ ] = { 11, 12, 13, 5, 6, 7 };
  
        System.out.println("Given Array");
        printArray(arr);
  
        MergeSort ob = new MergeSort();
        ob.sort(arr, 0, arr.length - 1);
  
        System.out.println("\nSorted array");
        printArray(arr);
    }
}


22...

import java.util.Scanner;
class array{
public static void main(String args[])
{
int i,temp,j;
Scanner in=new Scanner(System.in);
int array[]=new int[5];

System.out.println("Enter elements:");
for(i=0;i<array.length;i++)
{
array[i]=in.nextInt();
}
System.out.println("");
System.out.println("Before Sorting:");
for(i=0;i<array.length;i++)
System.out.println(array[i]);
for(i=0;i<=4;i++)
{
for(j=i+1;j<=4;j++)
{
if(array[i]>array[j])
{
temp=array[i];
array[i]=array[j];
array[j]=temp;
}
}
}
System.out.println("After Sorting:");
for(i=0;i<=4;i++)
System.out.println(array[i]);
}
}


import java.util.Scanner;
class calc{
public static void main(String args[])
{
int a,b,c,choice;
Scanner in=new Scanner(System.in);
System.out.println("1.Add 2.Sub 3.Mul 4.Div.");

System.out.println("Enter your choice:");
choice=in.nextInt();
switch(choice)
{
case 1:System.out.println("Enter first number:");
           a=in.nextInt();
           System.out.println(a);
           System.out.println("Enter second number:");
           b=in.nextInt();
           System.out.println(b);
           c=a+b;
           System.out.println("Sum is:"+c);
           break;

case 2:System.out.println("Enter first number:");
           a=in.nextInt();
           System.out.println(a);
           System.out.println("Enter second number:");
           b=in.nextInt();
           System.out.println(b);
           c=a-b;
           System.out.println("Subtraction is:"+c);
           break;

case 3:System.out.println("Enter first number:");
           a=in.nextInt();
           System.out.println(a);
           System.out.println("Enter second number:");
           b=in.nextInt();
           System.out.println(b);
           c=a*b;
           System.out.println("Multiplication is:"+c);
           break;

case 4:System.out.println("Enter first number:");
           a=in.nextInt();
           System.out.println(a);
           System.out.println("Enter second number:");
           b=in.nextInt();
           System.out.println(b);
           c=a/b;
           System.out.println("Division is:"+c);
           break;
}
}
}

32...

class LinearSearch
{
    public static int search(int arr[], int x)
    {
        int n = arr.length;
        for (int i = 0; i < n; i++)
        {
            if (arr[i] == x)
                return i;
        }
        return -1;
    }

    public static void main(String args[])
    {
        int arr[ ] = { 2, 3, 4, 10, 40 };
        int x = 10;
        int result = search(arr, x);
        if (result == -1)
            System.out.print(
                "Element is not present in array");
        else
            System.out.print("Element is present at index "
                             + result);
    }
}


25...
public class MatrixAddition{  
public static void main(String args[ ]){     
int a[ ][ ]= {{1,3,4}, {2,4,3}, {3,4,5}};    
int b[ ][ ]={{1,3,4},{2,4,3},{1,2,4}};    
      
int c[ ][ ]=new int[3][3];  //3 rows and 3 columns  
       
for(int i=0;i<3;i++)
{    
for(int j=0;j<3;j++)
{    
c[i][j]=a[i][j]+b[i][j];    //use - for subtraction  
System.out.print(c[i][j]+" ");    
}    
System.out.println();//new line    
}    
}
}


26...

public class CreateList {  
    public class Node{  
        int data;  
        Node next;  
        public Node(int data) {  
            this.data = data;  
        }  
    }  
    public Node head = null;  
    public Node tail = null;  
  
     
    public void add(int data){  
       
        Node newNode = new Node(data);  
         
        if(head == null) 
         {    
            head = newNode;  
            tail = newNode;  
            newNode.next = head;  
        }  
        else {  
            
            tail.next = newNode;  
            tail = newNode;    
            tail.next = head;  
        }  
    }  
  
    public void display() {  
        Node current = head;  
        if(head == null) {  
            System.out.println("List is empty");  
        }  
        else {  
            System.out.println("Nodes of the circular linked list: ");  
             do{    
                System.out.print(" "+ current.data);  
                current = current.next;  
            }
          while(current != head);  
            System.out.println();  
        }  
    }  
  
    public static void main(String[] args) {  
        CreateList cl = new CreateList();    
        cl.add(1);  
        cl.add(2);  
        cl.add(3);  
        cl.add(4);  
        //Displays all the nodes present in the list  
        cl.display();  
    }  
}    


39...

// Java implementation of QuickSort
import java.io.*;
class QuickSort
{

static void swap(int[ ] arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
 
static int partition(int[] arr, int low, int high)
{
     
    int pivot = arr[high];
     
    int i = (low - 1);
 
    for(int j = low; j <= high - 1; j++)
    {
         
        if (arr[j] < pivot)
        {
             
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, high);
    return (i + 1);
}
 
public static void quickSort(int[] arr, int low, int high)
{
    if (low < high)
    {
         
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
static void printArray(int[] arr, int size)
{
    for(int i = 0; i < size; i++)
        System.out.print(arr[i] + " ");
         
    System.out.println();
}
public static void main(String[] args)
{
    int[] arr = { 10, 7, 8, 9, 1, 5 };
    int n = arr.length;
     
    quickSort(arr, 0, n - 1);
    System.out.println("Sorted array: ");
    printArray(arr, n);
}
}